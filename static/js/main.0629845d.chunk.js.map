{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","container/ErrorBoundry.js","container/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","value","onChange","placeholder","Card","id","first","last","pic","email","country","city","src","alt","CardList","friends","map","friend","key","login","uuid","name","location","picture","medium","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","e","target","fetch","then","response","json","data","results","filteredFriends","filter","toLowerCase","includes","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAUeA,EARG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,sCAAsCC,KAAK,SAASC,MAAOJ,EAAaK,SAAUJ,EAAcK,YAAY,oBCgB1HC,EAnBF,SAAC,GAAmD,EAAjDC,GAAkD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAaC,GAAyB,EAAhCC,MAAgC,EAAzBD,KAAKE,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAClD,OAQI,6BAASZ,UAAU,mEACf,yBAAKA,UAAU,MACX,yBAAKa,IAAKJ,EAAKT,UAAU,sCAAsCc,IAAI,uBACnE,wBAAId,UAAU,UAAUO,EAAM,6BAAMC,GACpC,uBAAGR,UAAU,sBAAb,UAAsCY,EAAtC,aAA+CD,OCOhDI,EAnBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEf,OACI,6BAEQA,EAAQC,KAAI,SAAAC,GAAM,OAAI,kBAAE,EAAF,CAClBC,IAAKD,EAAOE,MAAMC,KAClBf,GAAIY,EAAOE,MAAMC,KACjBd,MAAOW,EAAOI,KAAKf,MACnBC,KAAMU,EAAOI,KAAKd,KAClBE,MAAOQ,EAAOR,MACdC,QAASO,EAAOK,SAASZ,QACzBC,KAAMM,EAAOK,SAASX,KACtBH,IAAKS,EAAOM,QAAQC,cCNzBC,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAChEJ,EAAMK,WCeJC,E,YAjBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,UAAU,GAHJ,E,+EAOIC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAOG,KAAKJ,MAAMC,SAClB,wBAAInC,UAAU,OAAd,8BAAsDsC,KAAKX,MAAMK,a,GAd9CQ,IAAMC,WCiDlBC,G,kBAzCb,aAAe,IAAD,8BACZ,+CAcFC,eAAiB,SAAAC,GACf,EAAKL,SAAS,CAAEzC,YAAa8C,EAAEC,OAAO3C,SAdtC,EAAKgC,MAAQ,CACXlB,QAAS,GACTlB,YAAa,IAJH,E,iFAQO,IAAD,OAClBgD,MAAM,yCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SAAS,CAAEvB,QAASkC,EAAKC,e,+BAOtC,IAAD,OACDC,EAAkBd,KAAKJ,MAAMlB,QAAQqC,QAAO,SAAAnC,GAEhD,MADgB,UAAMA,EAAOI,KAAKf,MAAlB,YAA2BW,EAAOI,KAAKd,KAAvC,YAA+CU,EAAOR,OACpD4C,cAAcC,SAAS,EAAKrB,MAAMpC,YAAYwD,kBAGlE,OACE,yBAAKtD,UAAU,UACb,4BAAQA,UAAU,SAAS4B,MAAO,CAACG,OAAQ,SACzC,wBAAI/B,UAAU,4BAAd,kBACA,kBAAC,EAAD,CAAWF,YAAawC,KAAKxC,YAAaC,aAAcuC,KAAKK,kBAE/D,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,QAASoC,W,GAlCbZ,IAAMC,Y,MCGJe,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.0629845d.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className=\"mb3\">\n            <input className=\"pa2 ba b--light-red bg-light-yellow\" type=\"search\" value={searchfield} onChange={searchChange} placeholder=\"search friend\"/>\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Card = ({ id, first, last, email, pic, country, city }) => {\n    return (\n        // <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        //     {/* <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/> */}\n        //     <img src={pic} alt=\"robot\"/>\n        //     <h3>{name}</h3>\n        //     <p className=\"fz-xs\">{id}</p>\n        //     <p className=\"fz-sm\">{email}</p>\n        // </div>\n        <article className=\" bg-light-yellow ma1 dib bg-white br3 pa1 pa3-ns ba b--black-10\">\n            <div className=\"tc\">\n                <img src={pic} className=\"br-100 h4 w4 dib ba b--black-05 pa1\" alt=\"Photo of my friend\" />\n                <h3 className=\"f5 mb2\">{first}<br/>{last}</h3>\n                <p className=\"fz-xs fw4 gray mt0\">{`${city}, ${country}`}</p>\n            </div>\n        </article>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({friends}) => {\n    // throw new Error(\"+++ critical error +++\")\n    return (\n        <div>\n            {\n                friends.map(friend => < Card \n                    key={friend.login.uuid} \n                    id={friend.login.uuid} \n                    first={friend.name.first}\n                    last={friend.name.last} \n                    email={friend.email}\n                    country={friend.location.country}\n                    city={friend.location.city} \n                    pic={friend.picture.medium} />)\n            }\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '75vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React from 'react'\n\nclass ErrorBoundry extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        return this.state.hasError ?\n        <h1 className=\"red\">Oooops... there's an error</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React from 'react';\nimport SearchBox from '../components/SearchBox'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from './ErrorBoundry'\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      friends: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=30')\n      .then(response => response.json())\n      // .then(response => console.log(response.results))\n      .then(data => this.setState({ friends: data.results }))\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchfield: e.target.value })\n  }\n\n  render() {\n    const filteredFriends = this.state.friends.filter(friend => {\n      const searchTerm = `${friend.name.first} ${friend.name.last} ${friend.email}`\n      return searchTerm.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n\n    return (\n      <div className=\"App tc\">\n        <header className=\"sticky\" style={{height: \"25vh\"}}>\n          <h1 className=\"ma0 pa2 pt3 f2 dark-gray\">Friends Search</h1>\n          <SearchBox searchfield={this.searchfield} searchChange={this.onSearchChange} />\n        </header>\n        <ErrorBoundry>\n          <Scroll>\n            <CardList friends={filteredFriends} />\n          </Scroll>\n        </ErrorBoundry>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
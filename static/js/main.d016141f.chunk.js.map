{"version":3,"sources":["reducer.js","components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","container/ErrorBoundry.js","actions.js","constants.js","container/App.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateFriends","friends","isPending","error","Header","nextProps","nextState","className","Component","SearchBox","searchChange","aria-label","type","value","onChange","placeholder","Card","id","first","last","pic","email","country","city","src","alt","CardList","map","friend","key","login","uuid","name","location","picture","medium","Scroll","props","style","overflowY","border","children","ErrorBoundry","state","hasError","info","this","setState","React","requestFriends","dispatch","fetch","then","response","json","data","payload","results","catch","err","App","setSearchField","filteredFriends","length","filter","toLowerCase","includes","connect","event","target","Boolean","window","hostname","match","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d016141f.chunk.js","sourcesContent":["import { SET_SEARCH_FIELD, GET_FRIENDS_PENDING, GET_FRIENDS_SUCCESS, GET_FRIENDS_FAILED } from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const setSearchField = (state=initialStateSearch, action='') => {\n    switch (action.type) {\n        case SET_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default: return state\n    }\n}\n\nconst initialStateFriends = {\n    friends: [],\n    isPending: false,\n    error: ''\n}\n\nexport const requestFriends = (state=initialStateFriends, action='') => {\n    switch (action.type) {\n        case GET_FRIENDS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case GET_FRIENDS_SUCCESS:\n            return Object.assign({}, state, {friends: action.payload, isPending: false})\n        case GET_FRIENDS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default: return state\n    }\n}","import React, { Component } from 'react'\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n\n    render() {\n        return <h1 className=\"ma0 p0 f1 white\">Find your Friend!</h1>    }\n}\n\nexport default Header \n","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className=\"\">\n            <input aria-label=\"Search\" className=\"searchbox pa1 ba\" type=\"search\" value={searchField} onChange={searchChange} placeholder=\"search friend\"/>\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Card = ({ id, first, last, email, pic, country, city }) => {\n    return (\n        // <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        //     {/* <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/> */}\n        //     <img src={pic} alt=\"robot\"/>\n        //     <h3>{name}</h3>\n        //     <p className=\"fz-xs\">{id}</p>\n        //     <p className=\"fz-sm\">{email}</p>\n        // </div>\n        <article className=\"card ma1 dib br3 pa1 pa3-ns ba b--black-10\">\n            <div className=\"tc\">\n                <img src={pic} className=\"br-100 w4 dib ba b--black-05 pa1\" alt=\"friend\" />\n                <h3 className=\"f5 mb2\">{first}<br/>{last}</h3>\n                <p className=\"fz-xs fw4 dark-gray mt0\">{`${city}, ${country}`}</p>\n            </div>\n        </article>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({friends}) => {\n    return (\n        <div>\n            {\n                friends.map(friend => < Card \n                    key={friend.login.uuid} \n                    id={friend.login.uuid} \n                    first={friend.name.first}\n                    last={friend.name.last} \n                    email={friend.email}\n                    country={friend.location.country}\n                    city={friend.location.city} \n                    pic={friend.picture.medium} />)\n            }\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div className=\"scroll pt3\" style={{overflowY: 'scroll', border: '1px solid gray'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React from 'react'\n\nclass ErrorBoundry extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        return this.state.hasError ?\n        <h1 className=\"red\">Oooops... there's an error</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundry","import { SET_SEARCH_FIELD, GET_FRIENDS_PENDING, GET_FRIENDS_SUCCESS, GET_FRIENDS_FAILED } from './constants'\n\nexport const setSearchField = (text) => ({\n        type: SET_SEARCH_FIELD,\n        payload: text\n    })\n\nexport const requestFriends = (dispatch) => {\n    dispatch({type: GET_FRIENDS_PENDING})\n    fetch('https://randomuser.me/api/?results=30')\n    .then(response => response.json())\n    .then(data => dispatch({type: GET_FRIENDS_SUCCESS, payload: data.results}))\n    .catch(err => dispatch({type: GET_FRIENDS_FAILED, payload: err}))\n}","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD'\nexport const GET_FRIENDS_PENDING = 'GET_FRIENDS_PENDING'\nexport const GET_FRIENDS_SUCCESS = 'GET_FRIENDS_SUCCESS'\nexport const GET_FRIENDS_FAILED = 'GET_FRIENDS_FAILED'","import React from 'react';\nimport Header from '../components/Header'\nimport SearchBox from '../components/SearchBox'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from './ErrorBoundry'\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { setSearchField, requestFriends } from '../actions';\n\nclass App extends React.Component {\n  \n\n  render() {\n    const {searchField, friends, isPending, setSearchField} = this.props\n    if (isPending){\n      return <h1>Loading...</h1>\n    }\n    let filteredFriends = []\n    if(friends.length > 0 ){\n\n      filteredFriends = friends.filter(friend => {\n        const searchTerm = `${friend.name.first} ${friend.name.last} ${friend.email}`\n        return searchTerm.toLowerCase().includes(searchField.toLowerCase())\n      })\n    }\n\n    return (\n      <div className=\"App tc\">\n        <header className=\"pb3\">\n          <Header />\n          <SearchBox searchField={searchField} searchChange={setSearchField} />\n        </header>\n        <ErrorBoundry>\n          <Scroll>\n            <CardList friends={filteredFriends} />\n          </Scroll>\n        </ErrorBoundry>\n      </div>\n    )\n  }\n}\n\nconst mapPropsToState = state => {\n  return {\n    searchField: state.setSearchField.searchField,\n    friends: state.requestFriends.friends,\n    isPending: state.requestFriends.isPending,\n    error: state.requestFriends.error\n  }\n}\n\nconst mapDispatchToState = dispatch => {\n  return {\n    setSearchField: (event) => dispatch(setSearchField(event.target.value)),\n    requestFriends: dispatch(requestFriends)\n  }\n}\n\nexport default connect(mapPropsToState, mapDispatchToState) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\n// import logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { setSearchField, requestFriends } from './reducer'\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({setSearchField, requestFriends})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}